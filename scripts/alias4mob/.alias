#values
export HISTTIMEFORMAT="%F %T ";
export PS1='\[\e[32m\][\[\e[33m\]\u\[\e[31m\]@\[\e[33m\]\h \[\e[34m\]\w \[\e[35m\]\t \[\e[31m\]!\! \[\e[34m\]\s\[\e[32m\]]\[\e[36m\]\$\[\e[0m\] ';
export PATH="/app/sword/schenker/framework/:/app/sword/axway/Integrator/bin/:/app/sword/schenker/testsuite:$PATH";
export CONSOLE_RECORD_DIR="/home/mob/console_record";
export LOG_FILENAME="/home/mob/mob.$(date "+%Y").log";
export WAITSEC=60;

#alias
alias ..='cd ..';
alias ...='cd ../..';
alias ll='ls -l';
alias l='ls -l';
alias la='ls -la';
alias new='ls -lt | grep -v "^total" | head';
alias old='ls -ltr | grep -v "^total" | head';

#functions definition
function record()
{
  read -p "Please input name for record: " record_name;
  if [[ "${record_name}" != "" ]]; then
    record_name="_${record_name}";
    record_name="$(echo ${record_name} | sed 's/ /_/g')";
  fi
  echo "record_name=0${record_name}0";
  mkdir -p ${CONSOLE_RECORD_DIR};
  NOW=$(date "+%Y%m%d_%H%M%S");
  script --timing=${CONSOLE_RECORD_DIR}/${NOW}${record_name}.time ${CONSOLE_RECORD_DIR}/${NOW}${record_name}.history;
}

function replay()
{
  clear;
  echo "Existing record(s) is/are as below, please input the one you want to replay:";
  seperateLine;
  ls ${CONSOLE_RECORD_DIR} | cut -d\. -f1 | sort | uniq;
  seperateLine;
  read record_name;
  echo "Hint: press \"Ctrl+S\" to pause, press \"Ctrl+Q\" to recover";
  scriptreplay ${CONSOLE_RECORD_DIR}/${record_name}.time ${CONSOLE_RECORD_DIR}/${record_name}.history $1;
}

function log()
{
  time_string=$(date "+[%Y-%m-%d %H:%M:%S]");
  echo "${time_string} $*" >> ${LOG_FILENAME};
}

function seperateLine()
{
  echo "********************************************************************************";
}

function deploy()
{
  if [[ "$1" == "" ]]; then
    dest_system="all";
  fi
  log "Deployment start. File structure is as below:";
  tree /home/mob/SECC_playbooks/MBC_deployer/files/ >> ${LOG_FILENAME};
  cd /home/mob/SECC_playbooks/MBC_deployer;
  ansible-playbook deploy.yml -l "${dest_system}";
  echo "Files have been distributed to remote servers, will check compile result ${WAITSEC} seconds later.";
  sleep ${WAITSEC};
  while true; do
    if [[ "${dest_system}" == "" ]]; then
      break;
    else
      ansible-playbook compile_result.yml -l "${dest_system}";
    fi
    read -p "Need to check compile result again? 1)Press Enter to end the loop. 2)Input servers or groups separate by comma for checking. " dest_system;
  done
  log "Deployment to ${dest_system} is done.";
  cd;
}

function clean()
{
  echo "File structure before cleaning:";
  tree /home/mob/SECC_playbooks/MBC_deployer/files/;
  seperateLine;
  find /home/mob/SECC_playbooks/MBC_deployer/files/ -type f -exec rm -v {} \;;
  seperateLine;
  echo "File structure after cleaning:";
  tree /home/mob/SECC_playbooks/MBC_deployer/files/;
  log "Deployer server has been cleaned up.";
}

function mcopy()
{
  if [[ $1 != "" && $2 != "" ]]; then
    ori_file="$1";
    dest_path="$2";
    if [[ $3 == "" ]]; then
      dest_system="all";
    else
      dest_system="$3";
    fi
    cd /home/mob/SECC_playbooks/MBC_deployer;
    ansible -m copy -a "src=${ori_file} dest=${dest_path}" "${dest_system}";
    log "Copy ${ori_file} to ${dest_system}:${dest_path}";
    cd;
  fi
}

function mshell()
{
  if [[ $1 != "" ]]; then
    command_line="$1";
    if [[ $2 == "" ]]; then
      dest_system="all";
    else
      dest_system="$2";
    fi
    cd /home/mob/SECC_playbooks/MBC_deployer;
    ansible -m shell -a "${command_line}" "${dest_system}";
    log "Executed ${command_line} on ${dest_system}";
    cd;
  fi
}

function mcompile()
{
  if [[ $2 == "" ]]; then
    dest_system="all";
  else
    dest_system="$2";
  fi
  mbc_name_prefix=$(echo "$1" | cut -d\. -f1);
  if [[ "${mbc_name_prefix}" == "" || "${mbc_name_prefix}" == "all" ]]; then
    mshell "/app/sword/schenker/framework/compileall > /dev/null &" "${dest_system}";
    echo "compileall has been called on remote server(s), will check compile result ${WAITSEC} seconds later.";
    cd /home/mob/SECC_playbooks/MBC_deployer;
    sleep ${WAITSEC};
    while true; do
      if [[ "${dest_system}" == "" ]]; then
        break;
      else
        ansible-playbook compile_result.yml -l "${dest_system}";
      fi
      read -p "Need to check compile result again? 1)Press Enter to end the loop. 2)Input servers or groups separate by comma for checking. " dest_system;
    done
    cd;
    log "Compileall on ${dest_system}.";
  else
    mshell "cd /app/sword/shared/axway/local/4edi/Compile; c4edi ${mbc_name_prefix}.s4; mv ${mbc_name_prefix}.x4 ../component/;" "${dest_system}";
    log "${mbc_name_prefix} has been compiled on ${dest_system}.";
  fi
}

function hint()
{
  echo "Alias:";
  alias;
  echo -e "\nFunctions:";
  echo "deploy(dest_system=\"all\"): deploy files in folders component/include/lib and check compile result afterwards for target system(default all).";
  echo "clean(): remove files in folders component/include/lib.";
  echo "mshell(command_line, dest_system=\"all\"), execute given command line(need to be quoted if parameter exists) on target system(default all).";
  echo "mcopy(ori_file, dest_path, dest_system=\"all\"), copy file(absolute path or relative path based on /home/mob/SECC_playbooks/MBC_deployer) to specific path(absolute path) on target system(default all).";
  echo "mcompile(mbc_name=\"all\", dest_system=\"all\"), compile specific MBC or all MBCs(default all) on target system(default all).";
}

log ".alias loaded.";
#END
